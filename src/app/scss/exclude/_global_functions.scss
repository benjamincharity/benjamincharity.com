//
//
//
// $FUNCTIONS
//
//
// @author Benjamin Charity <ben@benjamincharity.com>
//
// @doc
//  Define custom mixins and functions
// @end





//
// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
//
@function emCalc($pxWidth) {
  @return $pxWidth / $base-font-size * 1em;
}




///////////////////////////
//
// Pseudo Clearfix
//
///////////////////////////

//
// mixin to provide a clear to any element with IE6-7 support
//
@mixin clear-ie {
  &:before,
  &:after {
    content: "\0020";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//
//mixin to provide a clear to modern browsers IE8 and up
//
@mixin clear {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}




///////////////////////////
//
// My custom transition function - much more humanistic than easing etc
//
///////////////////////////
@mixin transition__custom($property: all, $timing: 200ms) {
  transition: $property $timing cubic-bezier(.26, .86, .44, .985);
}




///////////////////////////
//
// Hide text
//
///////////////////////////
@mixin hideText {
  color: transparent;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}




///////////////////////////
//
// Custom Animation
//
///////////////////////////

@mixin custAnimation($name, $duration: 200ms, $delay: 0, $count: 1) {
  -webkit-animation-name : $name;
  -moz-animation-name    : $name;
  -ms-animation-name     : $name;
  -o-animation-name      : $name;
  animation-name         : $name;

  -webkit-animation-iteration-count : $count;
  -moz-animation-iteration-count    : $count;
  -ms-animation-iteration-count     : $count;
  -o-animation-iteration-count      : $count;
  animation-iteration-count         : $count;

  -webkit-animation-duration : $duration;
  -moz-animation-duration    : $duration;
  -ms-animation-duration     : $duration;
  -o-animation-duration      : $duration;
  animation-duration         : $duration;

  -moz-animation-delay    : $delay;
  -webkit-animation-delay : $delay;
  -ms-animation-delay     : $delay;
  -o-animation-delay      : $delay;
  animation-delay         : $delay;
}




///////////////////////////
//
// Placeholders
//
///////////////////////////
@mixin placeholders {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &:-ms-input-placeholder {
    @content
  }
}




///////////////////////////
//
// CSS Columns
//
///////////////////////////

@mixin columns($count: 1, $spacing: 20px) {
  -webkit-column-count : $count;
  -moz-column-count    : $count;
  column-count         : $count;
  -webkit-column-gap : $spacing;
  -moz-column-gap    : $spacing;
  column-gap         : $spacing;
}




///////////////////////////
//
// Create a grid
// http://bjorkoy.com/2010/05/css-grids-with-sass/
//
///////////////////////////

// maths
$col_width: ($width - ($col_margin * ($columns - 1))) / $columns;
$col_total_width: $col_width + $col_margin;

// create row div
@mixin row() {
  @include clear;
  width: $width;
}

// create a column div
@mixin col($n: 1) {
  float: left;
  @include span($n);
}

// make an element span n columns
@mixin span($n: 1) {
  width: ($n * $col_width) + (($n - 1) * $col_margin);
  @if $n == $columns {
    margin-left: 0;
  }
  @else {
    margin-left: $col_margin;
  }
}

// the first column in a row needs this
@mixin first() {
  margin-left: 0;
}

// if you need to overwrite a previous `first()`, use this
@mixin resetFirst() {
  margin-left: $col_margin;
}

// prepend n blank columns
@mixin prepend($n: 1) {
  margin-left: $col_total_width * $n
}

// append n blank columns
@mixin append($n: 1) {
  margin-right: $col_total_width * $n + $col_margin
}

@mixin resetFirst() {
  margin-left: $col_margin;
}




///////////////////////////
//
// CSS Backface Flicker Fix
//
///////////////////////////

@mixin backface-flicker-fix() {
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility:    hidden;
  -ms-backface-visibility:     hidden;
}



///////////////////////////
//
// Create Pseudo Element Triangles
//
///////////////////////////
@mixin pseudo_triangle($direction, $color, $width, $height, $position:"", $centered:"") {

  @if $direction == down {
    border-top: $height solid $color;
  } @else if $direction == up {
    border-bottom: $height solid $color;
  }

  border-left: $width solid transparent;
  border-right: $width solid transparent;
  content: "";
  display: block;
  height: 0;
  position: absolute;

  @if #{$centered} == true {
    left: 50%;
    margin-left: -$width;
  }

  @if $position == top {
    top: -$height;
  } @else if $position == bottom {
    bottom: -$height;
  }

  width: 0;
}




///////////////////////////
//
// Flexbox
// http://umaar.github.io/css-flexbox-demo/
// https://github.com/doctyper/flexie
//
//
// flex-container() direction is required.
//
// Possible values:
//  - vertical
//  - horizontal
//
///////////////////////////

@mixin flex-container($direction) {
  -webkit-box-orient     : $direction;
  -moz-box-orient        : $direction;
  box-orient             : $direction;

  // we must translate the new syntax into the
  // old syntax for IE
  @if $direction == vertical {
    -ms-flex-direction     : column;
    -webkit-flex-direction : column;
    flex-direction         : column;
  } @else {
    -ms-flex-direction     : row;
    -webkit-flex-direction : row;
    flex-direction         : row;
  }

  display: -ms-flexbox;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flexbox;
  display: box;
  display: flex;
}

@mixin flex-component($number: 1) {
  -webkit-box-flex : $number;
  -webkit-flex     : $number;
  -moz-box-flex    : $number;
  -ms-flex         : $number;
  flex             : $number;
}

@mixin transform( $command ) {
  -webkit-transform: $command;
  -moz-transform:    $command;
  -ms-transform:     $command;
  -o-transform:      $command;
  transform:         $command;
}



///////////////////////////
//
// Flexbox
// http://css-tricks.com/conditional-media-query-mixins/
//
///////////////////////////


@mixin breakpoint($point) {
  @if $point == breakpoint-small {
    @media (max-width: 500px) { @content; }
  }
  @else if $point == breakpoint-medium {
    @media (min-width: 500px) { @content; }
  }
  @else if $point == breakpoint-medium-large {
    @media (min-width: 768px) { @content; }
  }
  @else if $point == breakpoint-large {
    @media (min-width: 1000px)  { @content; }
  }
  @else if $point == breakpoint-very-large {
    @media (min-width: 1200px)  { @content; }
  }
  @else if $point == breakpoint-huge {
    @media (min-width: 1400px)  { @content; }
  }
}

